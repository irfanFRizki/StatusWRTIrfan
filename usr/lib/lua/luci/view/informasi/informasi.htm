<%+header%>
<style>
  :root {
    --primary: #3b82f6;
    --success: #10b981;
    --bg-page: #f8fafc;
    --bg-card: #ffffff;
    --bg-terminal: #1e293b;
    --text-dark: #1e293b;
    --text-light: #64748b;
    --text-terminal: #10b981;
    --border: #e2e8f0;
  }

  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  body {
    background: var(--bg-page);
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  }

  .container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 2rem;
  }

  .page-header {
    margin-bottom: 2rem;
  }

  .page-title {
    font-size: 2rem;
    font-weight: 700;
    color: var(--text-dark);
    margin-bottom: 0.5rem;
  }

  .page-subtitle {
    color: var(--text-light);
    font-size: 1rem;
  }

  .data-container {
    background: var(--bg-card);
    border-radius: 12px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    overflow: hidden;
  }

  .data-header {
    padding: 1.5rem;
    border-bottom: 2px solid var(--border);
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .data-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-dark);
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .data-icon {
    width: 40px;
    height: 40px;
    background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
    color: white;
    border-radius: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.25rem;
  }

  .data-actions {
    display: flex;
    gap: 0.75rem;
  }

  .btn-refresh {
    padding: 0.75rem 1.25rem;
    background: var(--primary);
    color: white;
    border: none;
    border-radius: 8px;
    font-weight: 600;
    font-size: 0.875rem;
    cursor: pointer;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    transition: all 0.2s;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .btn-refresh:hover {
    background: #2563eb;
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(59, 130, 246, 0.3);
  }

  .btn-copy {
    padding: 0.75rem 1.25rem;
    background: var(--success);
    color: white;
    border: none;
    border-radius: 8px;
    font-weight: 600;
    font-size: 0.875rem;
    cursor: pointer;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    transition: all 0.2s;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .btn-copy:hover {
    background: #059669;
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(16, 185, 129, 0.3);
  }

  .terminal-wrapper {
    padding: 1.5rem;
    background: var(--bg-terminal);
    max-height: 700px;
    overflow-y: auto;
  }

  .terminal-content {
    font-family: 'Courier New', 'Consolas', monospace;
    font-size: 0.875rem;
    line-height: 1.8;
    color: var(--text-terminal);
    white-space: pre-wrap;
    word-break: break-all;
  }

  .loading-state {
    padding: 3rem;
    text-align: center;
    color: var(--text-light);
  }

  .loading-icon {
    font-size: 3rem;
    margin-bottom: 1rem;
    animation: spin 2s linear infinite;
  }

  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  .loading-text {
    font-size: 1.125rem;
  }

  /* Custom scrollbar for terminal */
  .terminal-wrapper::-webkit-scrollbar {
    width: 8px;
  }

  .terminal-wrapper::-webkit-scrollbar-track {
    background: rgba(255,255,255,0.05);
    border-radius: 4px;
  }

  .terminal-wrapper::-webkit-scrollbar-thumb {
    background: rgba(255,255,255,0.2);
    border-radius: 4px;
  }

  .terminal-wrapper::-webkit-scrollbar-thumb:hover {
    background: rgba(255,255,255,0.3);
  }

  .toast {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    background: var(--text-dark);
    color: white;
    padding: 1rem 1.5rem;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    animation: slideIn 0.3s ease-out;
    z-index: 1000;
  }

  @keyframes slideIn {
    from { transform: translateX(100%); opacity: 0; }
    to { transform: translateX(0); opacity: 1; }
  }

  .stats-bar {
    padding: 1rem 1.5rem;
    background: var(--bg-page);
    border-top: 1px solid var(--border);
    display: flex;
    gap: 2rem;
    font-size: 0.875rem;
  }

  .stat-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--text-light);
  }

  .stat-value {
    font-weight: 600;
    color: var(--text-dark);
  }

  @media (max-width: 768px) {
    .container {
      padding: 1rem;
    }

    .data-header {
      flex-direction: column;
      gap: 1rem;
      align-items: flex-start;
    }

    .data-actions {
      width: 100%;
      flex-direction: column;
    }

    .btn-refresh,
    .btn-copy {
      width: 100%;
      justify-content: center;
    }

    .terminal-content {
      font-size: 0.75rem;
    }

    .stats-bar {
      flex-direction: column;
      gap: 0.5rem;
    }
  }
</style>

<div class="container">
  <div class="page-header">
    <h1 class="page-title">Data Mentah Jaringan</h1>
    <p class="page-subtitle">Output langsung dari skrip monitoring online.sh</p>
  </div>
  
  <div class="data-container">
    <div class="data-header">
      <div class="data-title">
        <div class="data-icon">üíª</div>
        <span>Terminal Output</span>
      </div>
      <div class="data-actions">
        <button class="btn-refresh" onclick="updateInfo()">
          üîÑ Refresh
        </button>
        <button class="btn-copy" onclick="copyToClipboard()">
          üìã Copy
        </button>
      </div>
    </div>
    
    <div class="terminal-wrapper">
      <div class="terminal-content" id="info">
        <div class="loading-state">
          <div class="loading-icon">‚öôÔ∏è</div>
          <div class="loading-text">Memuat data...</div>
        </div>
      </div>
    </div>
    
    <div class="stats-bar">
      <div class="stat-item">
        üìä <span>Total Lines: <span class="stat-value" id="line-count">0</span></span>
      </div>
      <div class="stat-item">
        üì° <span>Total Devices: <span class="stat-value" id="device-count">0</span></span>
      </div>
      <div class="stat-item">
        üïê <span>Last Updated: <span class="stat-value" id="last-updated">-</span></span>
      </div>
    </div>
  </div>
</div>

<script>
function updateInfo() {
  fetch("<%= luci.dispatcher.build_url('admin/services/informasi/data') %>")
    .then(response => response.text())
    .then(text => {
      const infoElement = document.getElementById('info');
      
      if (!text || text.trim() === '') {
        infoElement.innerHTML = `
          <div class="loading-state">
            <div class="loading-icon">‚ö†Ô∏è</div>
            <div class="loading-text">Tidak ada data</div>
          </div>
        `;
        return;
      }
      
      infoElement.textContent = text;
      
      // Update statistics
      const lines = text.split('\n').filter(line => line.trim() !== '');
      document.getElementById('line-count').textContent = lines.length;
      
      // Count devices (lines that don't start with "IP," header)
      const deviceLines = lines.filter(line => !line.startsWith('IP,') && line.includes('IP:'));
      document.getElementById('device-count').textContent = deviceLines.length;
      
      // Update timestamp
      const now = new Date();
      const timeString = now.toLocaleTimeString('id-ID', { 
        hour: '2-digit', 
        minute: '2-digit',
        second: '2-digit'
      });
      document.getElementById('last-updated').textContent = timeString;
    })
    .catch(err => {
      console.error('Error fetching data:', err);
      document.getElementById('info').innerHTML = `
        <div class="loading-state">
          <div class="loading-icon">‚ö†Ô∏è</div>
          <div class="loading-text">Gagal memuat data</div>
          <p style="font-size: 0.875rem; margin-top: 0.5rem; color: var(--text-light);">Error: ${err.message}</p>
        </div>
      `;
    });
}

function copyToClipboard() {
  const text = document.getElementById('info').textContent;
  
  if (!text || text.includes('Memuat data') || text.includes('Tidak ada data')) {
    showToast('Tidak ada data untuk disalin');
    return;
  }
  
  navigator.clipboard.writeText(text).then(() => {
    showToast('Data berhasil disalin ke clipboard');
  }).catch(err => {
    console.error('Failed to copy:', err);
    // Fallback method
    const textarea = document.createElement('textarea');
    textarea.value = text;
    textarea.style.position = 'fixed';
    textarea.style.opacity = '0';
    document.body.appendChild(textarea);
    textarea.select();
    
    try {
      document.execCommand('copy');
      showToast('Data berhasil disalin ke clipboard');
    } catch (err) {
      showToast('Gagal menyalin data');
    }
    
    document.body.removeChild(textarea);
  });
}

function showToast(message) {
  const toast = document.createElement('div');
  toast.className = 'toast';
  toast.textContent = message;
  document.body.appendChild(toast);
  
  setTimeout(() => {
    toast.remove();
  }, 3000);
}

// Auto refresh every 5 seconds
setInterval(updateInfo, 5000);

// Initial load
updateInfo();
</script>

<%+footer%>